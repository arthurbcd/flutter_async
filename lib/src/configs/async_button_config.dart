// Generated by Dart Safe Data Class Generator. * Change this header on extension settings *
// ignore_for_file: avoid_dynamic_calls, lines_longer_than_80_chars
part of 'async_config.dart';

/// The configuration of `AsyncButton`.
class AsyncButtonConfig {
  /// Creates a new [AsyncButtonConfig].
  const AsyncButtonConfig({
    this.keepHeight,
    this.keepWidth,
    this.animateSize,
    this.animatedSizeConfig,
    this.errorDuration,
    this.successDuration,
    this.styleDuration,
    this.styleCurve,
    this.loadingBuilder,
    this.successBuilder,
    this.errorBuilder,
    this.errorTheme,
    this.loadingTheme,
    this.successTheme,
  });

  /// Shorthand for a [AsyncButtonConfig] with widgets instead of builders and
  /// colors instead of themes.
  ///
  /// The colors will be used to create a [ThemeData] with [ColorScheme.fromSeed].
  AsyncButtonConfig.icon({
    this.keepHeight,
    this.keepWidth,
    this.animateSize,
    this.animatedSizeConfig,
    this.errorDuration,
    this.successDuration,
    this.styleDuration,
    this.styleCurve,
    Color? loadingColor,
    Color? successColor,
    Color? errorColor,
    Widget? loadingIcon,
    Widget? successIcon,
    Widget? errorIcon,
  })  : loadingBuilder = (loadingIcon != null ? (_) => loadingIcon : null),
        successBuilder = (successIcon != null ? (_) => successIcon : null),
        errorBuilder = (errorIcon != null ? (_, e, s) => errorIcon : null),
        errorTheme = errorColor?.asSeedOf,
        loadingTheme = loadingColor?.asSeedOf,
        successTheme = successColor?.asSeedOf;

  /// Whether to keep button height on state changes. Defaults to `true`.
  final bool? keepHeight;

  /// Whether to keep button width on state changes. Defaults to `false`.
  final bool? keepWidth;

  /// Whether this button should animate its size.
  final bool? animateSize;

  /// The configuration for [AnimatedSize].
  final AnimatedSizeConfig? animatedSizeConfig;

  /// The duration to show error widget.
  final Duration? errorDuration;

  /// The duration to show success widget.
  final Duration? successDuration;

  /// The duration between styles animations.
  final Duration? styleDuration;

  /// The curve to use on styles animations.
  final Curve? styleCurve;

  /// The widget to show on loading.
  final WidgetBuilder? loadingBuilder;

  /// The widget to show on success.
  final WidgetBuilder? successBuilder;

  /// The widget to show on error.
  final ErrorBuilder? errorBuilder;

  /// The theme to use on error.
  final AsyncThemeGetter? errorTheme;

  /// The theme to use on loading.
  final AsyncThemeGetter? loadingTheme;

  /// The theme to use on success.
  final AsyncThemeGetter? successTheme;
}

extension on Color {
  ThemeData asSeedOf(BuildContext context) {
    return Theme.of(context).copyWith(
      colorScheme: ColorScheme.fromSeed(
        seedColor: this,
        brightness: Theme.of(context).brightness,
      ),
    );
  }
}

/// Gets a [ThemeData] from a [BuildContext].
typedef AsyncThemeGetter = ThemeData Function(BuildContext context);

/// Configuration for [AnimatedSize].
class AnimatedSizeConfig {
  /// Creates a new [AnimatedSizeConfig]
  ///
  /// This class will fill [AnimatedSize] parameters in an `AsyncButton`
  const AnimatedSizeConfig({
    this.alignment = Alignment.center,
    this.curve = Curves.fastOutSlowIn,
    this.duration = const Duration(milliseconds: 600),
    this.reverseDuration,
    this.clipBehavior = Clip.none,
  });

  /// The [AnimatedSize] alignment.
  final Alignment alignment;

  /// The [AnimatedSize] curve.
  final Curve curve;

  /// The [AnimatedSize] duration.
  final Duration duration;

  /// The [AnimatedSize] reverse duration.
  final Duration? reverseDuration;

  /// The [AnimatedSize] clip behavior.
  final Clip clipBehavior;
}

/// The resolved config of `AsyncButton`.
@immutable
class AsyncButtonResolvedConfig implements AsyncButtonConfig {
  /// Creates a [AsyncButtonConfig] with default values.
  const AsyncButtonResolvedConfig({
    this.keepHeight = true,
    this.keepWidth = false,
    this.animateSize = true,
    this.animatedSizeConfig = const AnimatedSizeConfig(),
    this.errorDuration = const Duration(seconds: 3),
    this.successDuration = const Duration(seconds: 3),
    this.styleCurve = Curves.easeInOut,
    this.styleDuration = const Duration(milliseconds: 300),
    this.errorBuilder = Async.errorBuilder,
    this.loadingBuilder = Async.loadingBuilder,
    this.successBuilder,
    this.errorTheme = Async.errorTheme,
    this.loadingTheme = Async.loadingTheme,
    this.successTheme = Async.successTheme,
  });

  @override
  final bool keepHeight;

  @override
  final bool keepWidth;

  @override
  final bool animateSize;

  @override
  final AnimatedSizeConfig animatedSizeConfig;

  @override
  final Duration errorDuration;

  @override
  final Duration successDuration;

  @override
  final Curve styleCurve;

  @override
  final Duration styleDuration;

  @override
  final ErrorBuilder errorBuilder;

  @override
  final WidgetBuilder loadingBuilder;

  @override
  final WidgetBuilder? successBuilder;

  @override
  final AsyncThemeGetter errorTheme;

  @override
  final AsyncThemeGetter loadingTheme;

  @override
  final AsyncThemeGetter successTheme;
}

///
extension AsyncButtonConfigExtension on AsyncButtonConfig {
  /// Copies this [AsyncButtonConfig] with the given fields replaced with the new values.
  AsyncButtonConfig copyWith({
    bool? keepHeight,
    bool? keepWidth,
    bool? animateSize,
    AnimatedSizeConfig? animatedSizeConfig,
    Duration? errorDuration,
    Duration? successDuration,
    Duration? styleDuration,
    Curve? styleCurve,
    WidgetBuilder? loadingBuilder,
    WidgetBuilder? successBuilder,
    ErrorBuilder? errorBuilder,
    AsyncThemeGetter? errorTheme,
    AsyncThemeGetter? loadingTheme,
    AsyncThemeGetter? successTheme,
  }) {
    return AsyncButtonConfig(
      keepHeight: keepHeight ?? this.keepHeight,
      keepWidth: keepWidth ?? this.keepWidth,
      animateSize: animateSize ?? this.animateSize,
      animatedSizeConfig: animatedSizeConfig ?? this.animatedSizeConfig,
      errorDuration: errorDuration ?? this.errorDuration,
      successDuration: successDuration ?? this.successDuration,
      styleDuration: styleDuration ?? this.styleDuration,
      styleCurve: styleCurve ?? this.styleCurve,
      loadingBuilder: loadingBuilder ?? this.loadingBuilder,
      successBuilder: successBuilder ?? this.successBuilder,
      errorBuilder: errorBuilder ?? this.errorBuilder,
      errorTheme: errorTheme ?? this.errorTheme,
      loadingTheme: loadingTheme ?? this.loadingTheme,
      successTheme: successTheme ?? this.successTheme,
    );
  }

  /// Merges this [AsyncButtonConfig] with the given [AsyncButtonConfig].
  AsyncButtonConfig merge(AsyncButtonConfig? other) {
    if (other == null) return this;
    return copyWith(
      keepHeight: keepHeight ?? other.keepHeight,
      keepWidth: keepWidth ?? other.keepWidth,
      animateSize: animateSize ?? other.animateSize,
      animatedSizeConfig: animatedSizeConfig ?? other.animatedSizeConfig,
      errorDuration: errorDuration ?? other.errorDuration,
      successDuration: successDuration ?? other.successDuration,
      styleDuration: styleDuration ?? other.styleDuration,
      styleCurve: styleCurve ?? other.styleCurve,
      loadingBuilder: loadingBuilder ?? other.loadingBuilder,
      successBuilder: successBuilder ?? other.successBuilder,
      errorBuilder: errorBuilder ?? other.errorBuilder,
      errorTheme: errorTheme ?? other.errorTheme,
      loadingTheme: loadingTheme ?? other.loadingTheme,
      successTheme: successTheme ?? other.successTheme,
    );
  }

  /// Creates a [AsyncButtonResolvedConfig] from this [AsyncButtonConfig].
  AsyncButtonResolvedConfig resolve() {
    const def = AsyncButtonResolvedConfig();

    return AsyncButtonResolvedConfig(
      keepHeight: keepHeight ?? def.keepHeight,
      keepWidth: keepWidth ?? def.keepWidth,
      animateSize: animateSize ?? def.animateSize,
      animatedSizeConfig: animatedSizeConfig ?? def.animatedSizeConfig,
      errorDuration: errorDuration ?? def.errorDuration,
      successDuration: successDuration ?? def.successDuration,
      styleCurve: styleCurve ?? def.styleCurve,
      styleDuration: styleDuration ?? def.styleDuration,
      errorBuilder: errorBuilder ?? def.errorBuilder,
      loadingBuilder: loadingBuilder ?? def.loadingBuilder,
      successBuilder: successBuilder ?? def.successBuilder,
      errorTheme: errorTheme ?? def.errorTheme,
      loadingTheme: loadingTheme ?? def.loadingTheme,
      successTheme: successTheme ?? def.successTheme,
    );
  }
}
